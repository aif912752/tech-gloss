---
// Error Boundary Component for graceful error handling
export interface Props {
  fallback?: string;
  showDetails?: boolean;
  componentName?: string;
}

const { 
  fallback = "เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง",
  showDetails = false,
  componentName = "Component"
} = Astro.props;
---

<div class="error-boundary" data-component={componentName}>
  <slot />
</div>

<!-- Fallback UI (hidden by default, shown by JavaScript when error occurs) -->
<div class="error-fallback hidden" data-fallback-for={componentName}>
  <div class="bg-red-50 border border-red-200 rounded-lg p-4 my-4">
    <div class="flex items-start">
      <div class="flex-shrink-0">
        <span class="text-red-600 text-xl">⚠️</span>
      </div>
      <div class="ml-3 flex-1">
        <h3 class="text-sm font-medium text-red-800">
          เกิดข้อผิดพลาด
        </h3>
        <p class="text-sm text-red-700 mt-1">
          {fallback}
        </p>
        {showDetails && (
          <details class="mt-2">
            <summary class="text-xs text-red-600 cursor-pointer hover:text-red-800">
              รายละเอียดข้อผิดพลาด
            </summary>
            <pre class="text-xs text-red-600 mt-2 bg-red-100 p-2 rounded overflow-auto" id={`error-details-${componentName}`}>
              <!-- Error details will be populated by JavaScript -->
            </pre>
          </details>
        )}
        <div class="mt-3 flex gap-2">
          <button 
            onclick="retryComponent(this)"
            class="text-xs bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded transition-colors"
          >
            ลองใหม่
          </button>
          <button 
            onclick="reportError(this)"
            class="text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded transition-colors"
          >
            แจ้งปัญหา
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ componentName, showDetails }}>
  // Error boundary functionality
  function setupErrorBoundary() {
    const boundary = document.querySelector(`[data-component="${componentName}"]`);
    const fallback = document.querySelector(`[data-fallback-for="${componentName}"]`);
    
    if (!boundary || !fallback) return;
    
    // Listen for JavaScript errors in this component
    window.addEventListener('error', (event) => {
      // Check if error is related to this component
      if (event.target && boundary.contains(event.target)) {
        showErrorFallback(event.error);
      }
    });
    
    // Listen for unhandled promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      // For promise rejections, we'll show a generic error
      showErrorFallback(event.reason);
    });
    
    function showErrorFallback(error) {
      // Hide the original component
      boundary.style.display = 'none';
      
      // Show the fallback UI
      fallback.classList.remove('hidden');
      
      // Populate error details if enabled
      if (showDetails) {
        const errorDetails = document.getElementById(`error-details-${componentName}`);
        if (errorDetails) {
          errorDetails.textContent = error?.stack || error?.message || String(error);
        }
      }
      
      // Log error for debugging
      console.error(`Error in ${componentName}:`, error);
      
      // In production, you might want to send this to an error tracking service
      // trackError(componentName, error);
    }
  }
  
  // Retry functionality
  window.retryComponent = function(button) {
    const fallback = button.closest('.error-fallback');
    const componentName = fallback.getAttribute('data-fallback-for');
    const boundary = document.querySelector(`[data-component="${componentName}"]`);
    
    if (boundary && fallback) {
      // Hide fallback
      fallback.classList.add('hidden');
      
      // Show original component
      boundary.style.display = '';
      
      // Try to reload the component (this is a simple approach)
      // In a more complex app, you might want to re-render the component
      window.location.reload();
    }
  };
  
  // Report error functionality
  window.reportError = function(button) {
    const fallback = button.closest('.error-fallback');
    const componentName = fallback.getAttribute('data-fallback-for');
    const errorDetails = document.getElementById(`error-details-${componentName}`)?.textContent || 'No details available';
    
    const subject = encodeURIComponent(`Error Report: ${componentName}`);
    const body = encodeURIComponent(`Component: ${componentName}\nURL: ${window.location.href}\nUser Agent: ${navigator.userAgent}\n\nError Details:\n${errorDetails}\n\nAdditional Information:\n`);
    
    window.open(`mailto:hello@techgloss.dev?subject=${subject}&body=${body}`);
  };
  
  // Initialize error boundary when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupErrorBoundary);
  } else {
    setupErrorBoundary();
  }
</script>

<style>
  .error-boundary {
    /* Container for the component that might error */
  }
  
  .error-fallback {
    /* Fallback UI styling */
  }
  
  .error-fallback details summary {
    list-style: none;
  }
  
  .error-fallback details summary::-webkit-details-marker {
    display: none;
  }
  
  .error-fallback details summary::before {
    content: '▶';
    margin-right: 4px;
    transition: transform 0.2s ease;
  }
  
  .error-fallback details[open] summary::before {
    transform: rotate(90deg);
  }
</style>