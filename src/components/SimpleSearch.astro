---
// Simple search component for testing
export interface Props {
  placeholder?: string;
}

const { 
  placeholder = "ค้นหาคำศัพท์... เช่น API, JSON, React"
} = Astro.props;
---

<div class="search-container relative">
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
      <svg class="w-5 h-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
    </div>
    
    <input 
      type="text"
      id="simple-search"
      class="w-full pl-12 pr-4 py-3 text-base border border-border rounded-xl focus:ring-2 focus:ring-ring focus:border-primary bg-input text-foreground placeholder:text-muted-foreground transition-all duration-200"
      placeholder={placeholder}
      autocomplete="off"
    />
  </div>
  
  <div id="search-results" class="absolute top-full left-0 right-0 mt-2 bg-card border border-border rounded-xl shadow-lg z-50 max-h-96 overflow-y-auto hidden">
    <div id="results-content" class="p-2">
      <!-- Results will be inserted here -->
    </div>
  </div>
</div>

<script>
  class SimpleSearch {
    private input: HTMLInputElement;
    private results: HTMLElement;
    private resultsContent: HTMLElement;
    private searchIndex: any[] = [];
    
    constructor() {
      this.input = document.getElementById('simple-search') as HTMLInputElement;
      this.results = document.getElementById('search-results') as HTMLElement;
      this.resultsContent = document.getElementById('results-content') as HTMLElement;
      
      console.log('SimpleSearch initialized');
      this.init();
    }
    
    async init() {
      // Load search index immediately to utilize preloaded resource
      this.loadSearchIndex();
      
      this.setupEventListeners();
    }
    
    async loadSearchIndex() {
      try {
        console.log('Loading search index...');
        const response = await fetch('/api/search-index.json');
        console.log('Response status:', response.status);
        
        if (response.ok) {
          this.searchIndex = await response.json();
          console.log('Search index loaded:', this.searchIndex.length, 'items');
          this.input.dataset.indexLoaded = 'true';
        } else {
          console.error('Failed to load search index:', response.status);
        }
      } catch (error) {
        console.error('Error loading search index:', error);
      }
    }
    
    setupEventListeners() {
      // Setup event listeners
      this.input.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value;
        console.log('Search query:', query);
        this.performSearch(query);
      });
      
      this.input.addEventListener('focus', () => {
        if (this.input.value) {
          this.showResults();
        }
      });
      
      // Click outside to close
      document.addEventListener('click', (e) => {
        if (!this.input.contains(e.target as Node) && !this.results.contains(e.target as Node)) {
          this.hideResults();
        }
      });
    }
    
    performSearch(query: string) {
      if (!query.trim()) {
        this.hideResults();
        return;
      }
      
      if (this.searchIndex.length === 0) {
        this.resultsContent.innerHTML = '<p class="text-muted-foreground">Search index not loaded</p>';
        this.showResults();
        return;
      }
      
      const searchTerm = query.toLowerCase();
      const results = this.searchIndex.filter(item => 
        item.title.toLowerCase().includes(searchTerm) ||
        item.description.toLowerCase().includes(searchTerm) ||
        item.category.toLowerCase().includes(searchTerm)
      ).slice(0, 5); // Limit to 5 results
      
      console.log('Search results:', results.length);
      
      if (results.length === 0) {
        this.resultsContent.innerHTML = '<p class="text-muted-foreground">ไม่พบผลการค้นหา</p>';
      } else {
        this.resultsContent.innerHTML = results.map(item => `
          <a href="/glossary/${item.slug}" class="search-result-link block p-4 border border-transparent rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary/20 group">
            <h4 class="font-semibold text-foreground mb-1 transition-colors">${item.title}</h4>
            <p class="text-sm text-muted-foreground mb-2 transition-colors line-clamp-2">${item.description}</p>
            <span class="inline-block px-2 py-1 text-xs bg-primary/10 text-primary rounded-full transition-colors">
              ${item.category}
            </span>
          </a>
        `).join('');
      }
      
      this.showResults();
    }
    
    showResults() {
      this.results.classList.remove('hidden');
    }
    
    hideResults() {
      this.results.classList.add('hidden');
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing SimpleSearch...');
    new SimpleSearch();
  });
  
  // Also initialize on window load to ensure preloaded resources are used
  window.addEventListener('load', () => {
    // This ensures the preloaded search index is utilized
    if (!document.querySelector('.search-container')) return;
    
    // Trigger a prefetch if search component exists but hasn't loaded index yet
    const searchInput = document.getElementById('simple-search');
    if (searchInput && !searchInput.dataset.indexLoaded) {
      fetch('/api/search-index.json').then(() => {
        console.log('Search index prefetched successfully');
      }).catch(console.error);
    }
  });
</script>

<style>
  /* Improved hover effects with better contrast */
  .search-result-link:hover {
    background: hsl(var(--accent));
    border-color: hsl(var(--primary) / 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px -2px hsl(var(--primary) / 0.15);
  }
  
  .search-result-link:hover h4 {
    color: hsl(var(--primary));
  }
  
  .search-result-link:hover p {
    color: hsl(var(--foreground) / 0.8);
  }
  
  .search-result-link:hover span {
    background: hsl(var(--primary) / 0.2);
    color: hsl(var(--primary));
  }
  
  /* Focus states for accessibility */
  .search-result-link:focus {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
  }
  
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Smooth transitions */
  .search-result-link * {
    transition: all 0.2s ease-in-out;
  }
  
  /* Better spacing between results */
  .search-result-link + .search-result-link {
    border-top: 1px solid hsl(var(--border));
  }
  
  .search-result-link:first-child {
    border-top-left-radius: 0.75rem;
    border-top-right-radius: 0.75rem;
  }
  
  .search-result-link:last-child {
    border-bottom-left-radius: 0.75rem;
    border-bottom-right-radius: 0.75rem;
  }
</style>