---
import BaseLayout from "../layouts/BaseLayout.astro";
import GlossaryCard from "../components/GlossaryCard.astro";
import SimpleSearch from "../components/SimpleSearch.astro";
import NewsletterSignup from "../components/NewsletterSignup.astro";
import { getCollection } from "astro:content";

// Get all glossary entries
const glossaryEntries = await getCollection("glossary");

// Sort entries by title
const sortedEntries = glossaryEntries.sort((a, b) =>
  a.data.title.localeCompare(b.data.title, "th")
);

// Get unique categories for filtering
const categories = [
  ...new Set(glossaryEntries.map((entry) => entry.data.category)),
].sort();

// Stats for display
const totalTerms = glossaryEntries.length;
const totalCategories = categories.length;
---

<BaseLayout
  title="TechGloss - คลังคำศัพท์ทางเทคนิคสำหรับนักพัฒนา"
  description="คลังคำศัพท์ทางเทคนิคสำหรับนักพัฒนา เรียนรู้และทำความเข้าใจคำศัพท์ต่างๆ ในโลกของการพัฒนาซอฟต์แวร์ พร้อมตัวอย่างโค้ดและคำอธิบายที่เข้าใจง่าย"
  type="website"

  tags={[
    "developer",
    "glossary",
    "programming",
    "tech",
    "คำศัพท์",
    "นักพัฒนา",
    "โปรแกรมมิ่ง",
  ]}
  allTerms={glossaryEntries}
  structuredDataType="glossary"
>
  <div class="container-wide">
    <!-- Hero Section -->
    <section class="text-center mb-16">
      <div class="max-w-4xl mx-auto">
        <div class="flex items-center justify-center mb-6">
          <div
            class="w-72   flex items-center justify-center  p-3"
          >
            <img 
              src="/src/assets/logo2-remove-bg.png" 
              alt="TechGloss Logo" 
              class="w-full h-full object-contain"
            />
          </div>
        </div>


        <p
          class="text-body-large text-muted-foreground max-w-3xl mx-auto mb-8 leading-relaxed"
        >
          คลังคำศัพท์ทางเทคนิคสำหรับนักพัฒนา เรียนรู้และทำความเข้าใจคำศัพท์ต่างๆ
          ในโลกของการพัฒนาซอฟต์แวร์ พร้อมตัวอย่างโค้ดและคำอธิบายที่เข้าใจง่าย
        </p>

        <!-- Stats -->
        <div class="flex items-center justify-center gap-8 mb-8">
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">{totalTerms}</div>
            <div class="text-sm text-muted-foreground">คำศัพท์</div>
          </div>
          <div class="w-px h-8 bg-border"></div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">{totalCategories}</div>
            <div class="text-sm text-muted-foreground">หมวดหมู่</div>
          </div>
          <div class="w-px h-8 bg-border"></div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">∞</div>
            <div class="text-sm text-muted-foreground">ความรู้</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Newsletter Signup -->
    <NewsletterSignup />

    <!-- Search and Filter Section -->
    <section class="mb-12" aria-labelledby="search-section-heading">
      <h2 id="search-section-heading" class="sr-only">ค้นหาและกรองคำศัพท์</h2>
      <div class="max-w-2xl mx-auto mb-8">
        <SimpleSearch
          placeholder="ค้นหาคำศัพท์... เช่น API, JSON, React"
        />
      </div>

      <!-- Category Filter -->
      {
        categories.length > 0 && (
          <div class="flex flex-wrap justify-center gap-2 mb-8" role="group" aria-labelledby="category-filter-heading">
            <h3 id="category-filter-heading" class="sr-only">กรองตามหมวดหมู่</h3>
            <button
              class="category-filter active px-4 py-2 rounded-full text-sm font-medium transition-colors bg-primary text-primary-foreground focus-ring"
              data-category="all"
              aria-pressed="true"
              aria-label="แสดงคำศัพท์ทั้งหมด"
            >
              ทั้งหมด ({totalTerms})
            </button>
            {categories.map((category) => {
              const count = glossaryEntries.filter(
                (entry) => entry.data.category === category
              ).length;
              return (
                <button
                  class="category-filter px-4 py-2 rounded-full text-sm font-medium transition-colors bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground focus-ring"
                  data-category={category}
                  aria-pressed="false"
                  aria-label={`แสดงคำศัพท์ในหมวด ${category}`}
                >
                  {category} ({count})
                </button>
              );
            })}
          </div>
        )
      }
    </section>

    <!-- Glossary Terms -->
    <section aria-labelledby="glossary-section-heading">
      <h2 id="glossary-section-heading" class="sr-only">รายการคำศัพท์</h2>
      {
        sortedEntries.length === 0 ? (
          <div class="text-center py-16" role="status" aria-live="polite">
            <div class="max-w-md mx-auto">
              <div class="w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6">
                <svg
                  class="w-12 h-12 text-muted-foreground"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                  />
                </svg>
              </div>
              <h3 class="text-heading-3 text-foreground mb-3">
                ยังไม่มีคำศัพท์
              </h3>
              <p class="text-muted-foreground">
                คำศัพท์จะถูกเพิ่มในขั้นตอนถัดไป
              </p>
            </div>
          </div>
        ) : (
          <div
            id="glossary-grid"
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            role="list"
            aria-label={`รายการคำศัพท์ทั้งหมด ${sortedEntries.length} คำ`}
          >
            {sortedEntries.map((entry) => (
              <GlossaryCard
                title={entry.data.title}
                slug={entry.slug}
                category={entry.data.category}
                description={entry.data.description}
                tags={entry.data.tags}
              />
            ))}
          </div>
        )
      }

      <!-- No results message (hidden by default) -->
      <div id="no-results" class="text-center py-16 hidden" role="status" aria-live="polite">
        <div class="max-w-md mx-auto">
          <div
            class="w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6"
          >
            <svg
              class="w-12 h-12 text-muted-foreground"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <h3 class="text-heading-3 text-foreground mb-3">ไม่พบคำศัพท์</h3>
          <p class="text-muted-foreground">
            ลองใช้คำค้นหาอื่น หรือเลือกหมวดหมู่ที่แตกต่าง
          </p>
        </div>
      </div>
    </section>
  </div>
</BaseLayout>

<script>
  // Category Filter Functionality (Search is handled by SearchBar component)
  document.addEventListener("DOMContentLoaded", () => {
    const categoryFilters = document.querySelectorAll(".category-filter");
    const glossaryGrid = document.getElementById("glossary-grid");
    const noResults = document.getElementById("no-results");

    if (!glossaryGrid || !noResults) return;

    // Get all glossary cards
    const allCards = Array.from(glossaryGrid.querySelectorAll("article"));
    let currentCategory = "all";

    // Category filter functionality
    function setActiveCategory(selectedCategory: string) {
      currentCategory = selectedCategory;

      // Update active state and ARIA attributes
      categoryFilters.forEach((filter) => {
        const htmlFilter = filter as HTMLElement;
        if (htmlFilter.dataset.category === selectedCategory) {
          htmlFilter.classList.add(
            "active",
            "bg-primary",
            "text-primary-foreground"
          );
          htmlFilter.classList.remove("bg-muted", "text-muted-foreground");
          htmlFilter.setAttribute("aria-pressed", "true");
        } else {
          htmlFilter.classList.remove(
            "active",
            "bg-primary",
            "text-primary-foreground"
          );
          htmlFilter.classList.add("bg-muted", "text-muted-foreground");
          htmlFilter.setAttribute("aria-pressed", "false");
        }
      });

      filterByCategory();
      
      // Announce filter change to screen readers
      const categoryName = selectedCategory === 'all' ? 'ทั้งหมด' : selectedCategory;
      announceToScreenReader(`กรองแสดงคำศัพท์ในหมวด ${categoryName}`);
    }

    // Filter cards by category
    function filterByCategory() {
      let visibleCount = 0;

      allCards.forEach((card) => {
        const category =
          card.querySelector(".inline-flex")?.textContent?.toLowerCase() || "";
        const matchesCategory =
          currentCategory === "all" ||
          category.includes(currentCategory.toLowerCase());

        if (matchesCategory) {
          card.style.display = "block";
          card.classList.add("animate-fade-in");
          visibleCount++;
        } else {
          card.style.display = "none";
          card.classList.remove("animate-fade-in");
        }
      });

      if (glossaryGrid && noResults) {
        glossaryGrid.style.display = visibleCount === 0 ? "none" : "grid";
        noResults.classList.toggle("hidden", visibleCount > 0);
        
        // Update ARIA label with current count
        if (visibleCount > 0) {
          glossaryGrid.setAttribute("aria-label", `รายการคำศัพท์ ${visibleCount} คำ`);
        }
      }
    }

    // Event listeners for category filters
    categoryFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        const category = (filter as HTMLElement).dataset.category;
        if (category) {
          setActiveCategory(category);
        }
      });
    });

    // Listen for search events from SearchBar component
    window.addEventListener("searchPerformed", (e) => {
      const { query, results } = (e as CustomEvent).detail;

      if (query && results.length > 0) {
        // Hide category filters when searching
        const filterSection = document.querySelector(
          ".flex.flex-wrap.justify-center"
        ) as HTMLElement;
        if (filterSection) {
          filterSection.style.opacity = "0.5";
          filterSection.style.pointerEvents = "none";
        }
      } else {
        // Show category filters when not searching
        const filterSection = document.querySelector(
          ".flex.flex-wrap.justify-center"
        ) as HTMLElement;
        if (filterSection) {
          filterSection.style.opacity = "1";
          filterSection.style.pointerEvents = "auto";
        }

        // Apply current category filter
        filterByCategory();
      }
    });

    // Keyboard shortcuts and accessibility helpers
    document.addEventListener("keydown", (e) => {
      // Focus search on '/' key
      if (e.key === "/" && !e.ctrlKey && !e.metaKey && e.target !== document.querySelector("[data-search-input]")) {
        e.preventDefault();
        const searchInput = document.querySelector(
          "[data-search-input]"
        ) as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
          announceToScreenReader("โฟกัสไปที่ช่องค้นหา");
        }
      }
      
      // Navigate category filters with arrow keys when focused
      if ((e.key === "ArrowLeft" || e.key === "ArrowRight") && 
          (e.target as HTMLElement)?.classList.contains("category-filter")) {
        e.preventDefault();
        const filters = Array.from(categoryFilters);
        const currentIndex = filters.indexOf(e.target as HTMLElement);
        let nextIndex;
        
        if (e.key === "ArrowLeft") {
          nextIndex = currentIndex > 0 ? currentIndex - 1 : filters.length - 1;
        } else {
          nextIndex = currentIndex < filters.length - 1 ? currentIndex + 1 : 0;
        }
        
        (filters[nextIndex] as HTMLElement).focus();
      }
    });
    
    // Helper function to announce to screen readers
    function announceToScreenReader(message: string) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        if (document.body.contains(announcement)) {
          document.body.removeChild(announcement);
        }
      }, 1000);
    }
  });
</script>

<style>
  /* Search input focus animation */
  #search-input:focus {
    transform: translateY(-1px);
    box-shadow:
      0 10px 25px -5px rgba(34, 197, 94, 0.1),
      0 10px 10px -5px rgba(34, 197, 94, 0.04);
  }

  /* Category filter hover animation */
  .category-filter:hover {
    transform: translateY(-1px);
  }

  /* Stagger animation for cards */
  article:nth-child(1) {
    animation-delay: 0ms;
  }
  article:nth-child(2) {
    animation-delay: 50ms;
  }
  article:nth-child(3) {
    animation-delay: 100ms;
  }
  article:nth-child(4) {
    animation-delay: 150ms;
  }
  article:nth-child(5) {
    animation-delay: 200ms;
  }
  article:nth-child(6) {
    animation-delay: 250ms;
  }
  article:nth-child(n + 7) {
    animation-delay: 300ms;
  }
</style>
