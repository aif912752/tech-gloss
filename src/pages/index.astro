---
import BaseLayout from '../layouts/BaseLayout.astro';
import GlossaryCard from '../components/GlossaryCard.astro';
import SearchBar from '../components/SearchBar.astro';
import { getCollection } from 'astro:content';

// Get all glossary entries
const glossaryEntries = await getCollection('glossary');

// Sort entries by title
const sortedEntries = glossaryEntries.sort((a, b) => 
  a.data.title.localeCompare(b.data.title, 'th')
);

// Get unique categories for filtering
const categories = [...new Set(glossaryEntries.map(entry => entry.data.category))].sort();

// Stats for display
const totalTerms = glossaryEntries.length;
const totalCategories = categories.length;
---

<BaseLayout 
  title="TechGloss - ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤" 
  description="‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
  type="website"
  tags={['developer', 'glossary', 'programming', 'tech', '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå', '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤', '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á']}
  allTerms={glossaryEntries}
  structuredDataType="glossary"
>
  <div class="container-wide">
    <!-- Hero Section -->
    <section class="text-center mb-16">
      <div class="max-w-4xl mx-auto">
        <div class="flex items-center justify-center mb-6">
          <div class="w-16 h-16 bg-gradient-green rounded-2xl flex items-center justify-center shadow-green-lg">
            <span class="text-3xl">üåø</span>
          </div>
        </div>
        
        <h1 class="text-display text-gradient-green mb-6">
          TechGloss
        </h1>
        
        <p class="text-body-large text-muted-foreground max-w-3xl mx-auto mb-8 leading-relaxed">
          ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå 
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        </p>
        
        <!-- Stats -->
        <div class="flex items-center justify-center gap-8 mb-8">
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">{totalTerms}</div>
            <div class="text-sm text-muted-foreground">‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå</div>
          </div>
          <div class="w-px h-8 bg-border"></div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">{totalCategories}</div>
            <div class="text-sm text-muted-foreground">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
          </div>
          <div class="w-px h-8 bg-border"></div>
          <div class="text-center">
            <div class="text-2xl font-bold text-primary">‚àû</div>
            <div class="text-sm text-muted-foreground">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Search and Filter Section -->
    <section class="mb-12">
      <div class="max-w-2xl mx-auto mb-8">
        <SearchBar 
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå... ‡πÄ‡∏ä‡πà‡∏ô API, JSON, React"
          showSuggestions={true}
          maxResults={8}
        />
      </div>

      <!-- Category Filter -->
      {categories.length > 0 && (
        <div class="flex flex-wrap justify-center gap-2 mb-8">
          <button 
            class="category-filter active px-4 py-2 rounded-full text-sm font-medium transition-colors bg-primary text-primary-foreground"
            data-category="all"
          >
            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({totalTerms})
          </button>
          {categories.map(category => {
            const count = glossaryEntries.filter(entry => entry.data.category === category).length;
            return (
              <button 
                class="category-filter px-4 py-2 rounded-full text-sm font-medium transition-colors bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground"
                data-category={category}
              >
                {category} ({count})
              </button>
            );
          })}
        </div>
      )}
    </section>

    <!-- Glossary Terms -->
    <section>
      {sortedEntries.length === 0 ? (
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <div class="w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6">
              <svg class="w-12 h-12 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
              </svg>
            </div>
            <h3 class="text-heading-3 text-foreground mb-3">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå</h3>
            <p class="text-muted-foreground">‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>
          </div>
        </div>
      ) : (
        <div id="glossary-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedEntries.map((entry) => (
            <GlossaryCard
              title={entry.data.title}
              slug={entry.slug}
              category={entry.data.category}
              description={entry.data.description}
              tags={entry.data.tags}
            />
          ))}
        </div>
      )}

      <!-- No results message (hidden by default) -->
      <div id="no-results" class="text-center py-16 hidden">
        <div class="max-w-md mx-auto">
          <div class="w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-12 h-12 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
          </div>
          <h3 class="text-heading-3 text-foreground mb-3">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå</h3>
          <p class="text-muted-foreground">‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á</p>
        </div>
      </div>
    </section>
  </div>
</BaseLayout>

<script>
  // Category Filter Functionality (Search is handled by SearchBar component)
  document.addEventListener('DOMContentLoaded', () => {
    const categoryFilters = document.querySelectorAll('.category-filter');
    const glossaryGrid = document.getElementById('glossary-grid');
    const noResults = document.getElementById('no-results');
    
    if (!glossaryGrid) return;
    
    // Get all glossary cards
    const allCards = Array.from(glossaryGrid.querySelectorAll('article'));
    let currentCategory = 'all';
    
    // Category filter functionality
    function setActiveCategory(selectedCategory) {
      currentCategory = selectedCategory;
      
      // Update active state
      categoryFilters.forEach(filter => {
        if (filter.dataset.category === selectedCategory) {
          filter.classList.add('active', 'bg-primary', 'text-primary-foreground');
          filter.classList.remove('bg-muted', 'text-muted-foreground');
        } else {
          filter.classList.remove('active', 'bg-primary', 'text-primary-foreground');
          filter.classList.add('bg-muted', 'text-muted-foreground');
        }
      });
      
      filterByCategory();
    }
    
    // Filter cards by category
    function filterByCategory() {
      let visibleCount = 0;
      
      allCards.forEach(card => {
        const category = card.querySelector('.inline-flex')?.textContent?.toLowerCase() || '';
        const matchesCategory = currentCategory === 'all' || 
          category.includes(currentCategory.toLowerCase());
        
        if (matchesCategory) {
          card.style.display = 'block';
          card.classList.add('animate-fade-in');
          visibleCount++;
        } else {
          card.style.display = 'none';
          card.classList.remove('animate-fade-in');
        }
      });
      
      // Show/hide no results message
      if (visibleCount === 0) {
        glossaryGrid.style.display = 'none';
        noResults.classList.remove('hidden');
      } else {
        glossaryGrid.style.display = 'grid';
        noResults.classList.add('hidden');
      }
    }
    
    // Event listeners for category filters
    categoryFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        setActiveCategory(filter.dataset.category);
      });
    });
    
    // Listen for search events from SearchBar component
    window.addEventListener('searchPerformed', (e) => {
      const { query, results } = e.detail;
      
      if (query && results.length > 0) {
        // Hide category filters when searching
        const filterSection = document.querySelector('.flex.flex-wrap.justify-center');
        if (filterSection) {
          filterSection.style.opacity = '0.5';
          filterSection.style.pointerEvents = 'none';
        }
      } else {
        // Show category filters when not searching
        const filterSection = document.querySelector('.flex.flex-wrap.justify-center');
        if (filterSection) {
          filterSection.style.opacity = '1';
          filterSection.style.pointerEvents = 'auto';
        }
        
        // Apply current category filter
        filterByCategory();
      }
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Focus search on '/' key
      if (e.key === '/' && !e.ctrlKey && !e.metaKey) {
        e.preventDefault();
        const searchInput = document.querySelector('[data-search-input]') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }
    });
  });
</script>

<style>
  /* Search input focus animation */
  #search-input:focus {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px -5px rgba(34, 197, 94, 0.1), 0 10px 10px -5px rgba(34, 197, 94, 0.04);
  }
  
  /* Category filter hover animation */
  .category-filter:hover {
    transform: translateY(-1px);
  }
  
  /* Stagger animation for cards */
  article:nth-child(1) { animation-delay: 0ms; }
  article:nth-child(2) { animation-delay: 50ms; }
  article:nth-child(3) { animation-delay: 100ms; }
  article:nth-child(4) { animation-delay: 150ms; }
  article:nth-child(5) { animation-delay: 200ms; }
  article:nth-child(6) { animation-delay: 250ms; }
  article:nth-child(n+7) { animation-delay: 300ms; }
</style>